{
  generate=[java="8" names="long"]

  parserClass="org.ice1000.tt.psi.agda.AgdaParser"

  psiClassPrefix="Agda"
  psiImplClassSuffix="Impl"
  psiPackage="org.ice1000.tt.psi.agda"
  psiImplPackage="org.ice1000.tt.psi.agda.impl"

  elementTypeHolderClass="org.ice1000.tt.psi.agda.AgdaTypes"
  elementTypeClass="org.ice1000.tt.psi.agda.AgdaElementType"
  tokenTypeClass="org.ice1000.tt.psi.agda.AgdaTokenType"

  extends(".*Exp")=exp
  extends(".*Block")=declaration
}

/// This is just a placeholder.
file ::= module | layoutElement*
token ::=
   IDENTIFIER | NUMBER | FLOAT | HOLE | KEYWORD | UNIVERSE | DOT | SEMI | ARROW
 | ELLIPSIS | DOT_DOT | CLOSE_IDIOM_BRACKET | OPEN_IDIOM_BRACKET | LAMBDA | COLON
 | EQUAL | UNDERSCORE | QUESTION_MARK | OPEN_PAREN | CLOSE_PAREN | OPEN_BRACE
 | CLOSE_BRACE | BAR | AS

module ::= KW_MODULE IDENTIFIER KW_WHERE
 layout {
	pin=1
	extends=declaration
}

signature ::= IDENTIFIER COLON exp whereClause? {
	pin=2
	extends=declaration
}
implementation ::= exp EQUAL exp whereClause? {
	pin=2
	extends=declaration
}
whereClause ::= WHERE declaration+ { pin=1 }
declaration ::=
   signature
 | implementation
 | module
 | primitiveBlock
 | privateBlock
 | variableBlock

primitiveBlock ::= KW_PRIMITIVE layout { pin=1 }
privateBlock ::= KW_PRIVATE layout { pin=1 }
variableBlock ::= KW_VARIABLE layout { pin=1 }

layout ::= layoutElement | indentationLayout
private indentationLayout ::=
 LAYOUT_START
  layoutElement*
 LAYOUT_END? { pin=1 }

private layoutElement ::= LAYOUT_SEP? declaration

exp ::= holeExp | string | nameExp | token
holeExp ::= HOLE
nameExp ::= IDENTIFIER
string ::= CHR_LIT | STR_LIT {
	mixin='org.ice1000.tt.psi.agda.AgdaStringMixin'
	extends=exp
}
