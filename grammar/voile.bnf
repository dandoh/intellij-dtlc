//noinspection BnfResolveForFile
{
  generate=[java="8" names="long"]

  parserClass="org.ice1000.tt.psi.voile.VoileParser"

  psiClassPrefix="Voile"
  psiImplClassSuffix="Impl"
  psiPackage="org.ice1000.tt.psi.voile"
  psiImplPackage="org.ice1000.tt.psi.voile.impl"

  elementTypeHolderClass="org.ice1000.tt.psi.voile.VoileTypes"
  elementTypeClass="org.ice1000.tt.psi.voile.VoileElementType"
  tokenTypeClass="org.ice1000.tt.psi.voile.VoileTokenType"

  extends(".*Expr")=expr
}

file ::= declaration*

private declaration ::= implementation | signature

nameDecl ::= IDENTIFIER {
	implements=['com.intellij.psi.PsiNameIdentifierOwner']
	mixin='org.ice1000.tt.psi.voile.VoileNameDeclMixin'
}
nameUsage ::= IDENTIFIER {
	extends=expr
	mixin='org.ice1000.tt.psi.voile.VoileNameUsageMixin'
}

expr ::=
   sigExpr
 | piExpr
 | dollarExpr
 | commaExpr
 | pipeExpr
 | sumExpr
 | appExpr
 | litExpr
 | lamExpr
 | nameUsage
 | telescopicExpr
 | parenExpr

piExpr ::= expr ARROW expr { mixin='org.ice1000.tt.psi.voile.VoilePiSigMixin '}
sigExpr ::= expr SIG expr { mixin='org.ice1000.tt.psi.voile.VoilePiSigMixin '}
telescopicExpr ::= LPAREN nameDecl+ COLON expr RPAREN {
	pin=3
	implements=['com.intellij.psi.PsiNameIdentifierOwner']
	mixin='org.ice1000.tt.psi.voile.VoileLocalDeclMixin'
}
dollarExpr ::= expr DOLLAR expr
pipeExpr ::= expr PIPE expr
commaExpr ::= expr COMMA expr
sumExpr ::= expr SUM expr
lamExpr ::= LAM nameDecl+ DOT expr {
	pin=1
	implements=['com.intellij.psi.PsiNameIdentifierOwner']
	mixin='org.ice1000.tt.psi.voile.VoileLocalDeclMixin'
}
litExpr ::= META | VARIANT | CONS | BOT | KW_TYPE
appExpr ::= expr expr+
parenExpr ::= LPAREN expr RPAREN

signature ::= KW_VAL nameDecl COLON expr SEMI {
	pin=1
	implements=['com.intellij.psi.PsiNameIdentifierOwner']
	mixin='org.ice1000.tt.psi.voile.VoileGlobDeclMixin'
}
implementation ::= KW_LET nameDecl EQ expr SEMI {
	pin=1
	implements=['com.intellij.psi.PsiNameIdentifierOwner']
	mixin='org.ice1000.tt.psi.voile.VoileGlobDeclMixin'
}
