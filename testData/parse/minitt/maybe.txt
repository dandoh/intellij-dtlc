FILE
  MiniTTDeclarationExpressionImpl(DECLARATION_EXPRESSION)
    MiniTTDeclarationImpl(DECLARATION)
      PsiElement(LET_KEYWORD)('let')
      PsiWhiteSpace(' ')
      MiniTTAtomPatternImpl(ATOM_PATTERN)
        PsiElement(IDENTIFIER)('maybe')
      PsiElement(COLON)(':')
      PsiWhiteSpace(' ')
      MiniTTFunctionTypeImpl(FUNCTION_TYPE)
        MiniTTUniverseImpl(UNIVERSE)
          PsiElement(TYPE_UNIVERSE)('Type')
        PsiWhiteSpace(' ')
        PsiElement(ARROW)('->')
        PsiWhiteSpace(' ')
        MiniTTUniverseImpl(UNIVERSE)
          PsiElement(TYPE_UNIVERSE)('Type')
      PsiWhiteSpace(' ')
      PsiElement(EQ)('=')
      PsiWhiteSpace(' ')
      MiniTTLambdaExpressionImpl(LAMBDA_EXPRESSION)
        PsiElement(LAMBDA)('\lambda')
        PsiWhiteSpace(' ')
        MiniTTAtomPatternImpl(ATOM_PATTERN)
          PsiElement(IDENTIFIER)('t')
        PsiElement(DOT)('.')
        PsiWhiteSpace(' ')
        MiniTTSumImpl(SUM)
          PsiElement(SUM_KEYWORD)('Sum')
          PsiWhiteSpace(' ')
          MiniTTBranchesImpl(BRANCHES)
            PsiElement(LEFT_BRACE)('{')
            PsiWhiteSpace(' ')
            MiniTTConstructorImpl(CONSTRUCTOR)
              PsiElement(CONSTRUCTOR_NAME)('Just')
              PsiWhiteSpace(' ')
              MiniTTVariableImpl(VARIABLE)
                PsiElement(IDENTIFIER)('t')
            PsiWhiteSpace(' ')
            PsiElement(SEP)('|')
            PsiWhiteSpace(' ')
            MiniTTConstructorImpl(CONSTRUCTOR)
              PsiElement(CONSTRUCTOR_NAME)('Nothing')
            PsiWhiteSpace(' ')
            PsiElement(RIGHT_BRACE)('}')
      PsiElement(SEMICOLON)(';')
    PsiWhiteSpace('\n\n')
    MiniTTDeclarationExpressionImpl(DECLARATION_EXPRESSION)
      MiniTTDeclarationImpl(DECLARATION)
        PsiElement(LET_KEYWORD)('let')
        PsiWhiteSpace(' ')
        MiniTTAtomPatternImpl(ATOM_PATTERN)
          PsiElement(IDENTIFIER)('the')
        PsiElement(COLON)(':')
        PsiWhiteSpace(' ')
        MiniTTPiTypeImpl(PI_TYPE)
          PsiElement(PI)('\Pi')
          PsiWhiteSpace(' ')
          MiniTTTypedAbstractionImpl(TYPED_ABSTRACTION)
            MiniTTTypedPatternImpl(TYPED_PATTERN)
              MiniTTAtomPatternImpl(ATOM_PATTERN)
                PsiElement(IDENTIFIER)('t')
              PsiElement(COLON)(':')
              PsiWhiteSpace(' ')
              MiniTTUniverseImpl(UNIVERSE)
                PsiElement(TYPE_UNIVERSE)('Type')
            PsiElement(DOT)('.')
            PsiWhiteSpace(' ')
            MiniTTAtomImpl(ATOM)
              PsiElement(LEFT_PAREN)('(')
              MiniTTFunctionTypeImpl(FUNCTION_TYPE)
                MiniTTVariableImpl(VARIABLE)
                  PsiElement(IDENTIFIER)('t')
                PsiWhiteSpace(' ')
                PsiElement(ARROW)('->')
                PsiWhiteSpace(' ')
                MiniTTVariableImpl(VARIABLE)
                  PsiElement(IDENTIFIER)('t')
              PsiElement(RIGHT_PAREN)(')')
        PsiWhiteSpace(' ')
        PsiElement(EQ)('=')
        PsiWhiteSpace(' ')
        MiniTTLambdaExpressionImpl(LAMBDA_EXPRESSION)
          PsiElement(LAMBDA)('\lambda')
          PsiWhiteSpace(' ')
          MiniTTAtomPatternImpl(ATOM_PATTERN)
            PsiElement(META_VAR)('_')
          PsiElement(DOT)('.')
          PsiWhiteSpace(' ')
          MiniTTLambdaExpressionImpl(LAMBDA_EXPRESSION)
            PsiElement(LAMBDA)('\lambda')
            PsiWhiteSpace(' ')
            MiniTTAtomPatternImpl(ATOM_PATTERN)
              PsiElement(IDENTIFIER)('a')
            PsiElement(DOT)('.')
            PsiWhiteSpace(' ')
            MiniTTVariableImpl(VARIABLE)
              PsiElement(IDENTIFIER)('a')
        PsiElement(SEMICOLON)(';')
      PsiWhiteSpace('\n\n')
      MiniTTDeclarationExpressionImpl(DECLARATION_EXPRESSION)
        MiniTTDeclarationImpl(DECLARATION)
          PsiElement(LET_KEYWORD)('let')
          PsiWhiteSpace(' ')
          MiniTTAtomPatternImpl(ATOM_PATTERN)
            PsiElement(IDENTIFIER)('unwrap_type')
          PsiWhiteSpace(' ')
          MiniTTPrefixParameterImpl(PREFIX_PARAMETER)
            PsiElement(LEFT_PAREN)('(')
            MiniTTTypedPatternImpl(TYPED_PATTERN)
              MiniTTAtomPatternImpl(ATOM_PATTERN)
                PsiElement(IDENTIFIER)('t')
              PsiWhiteSpace(' ')
              PsiElement(COLON)(':')
              PsiWhiteSpace(' ')
              MiniTTUniverseImpl(UNIVERSE)
                PsiElement(TYPE_UNIVERSE)('Type')
            PsiElement(RIGHT_PAREN)(')')
          PsiElement(COLON)(':')
          PsiWhiteSpace(' ')
          MiniTTFunctionTypeImpl(FUNCTION_TYPE)
            MiniTTAtomImpl(ATOM)
              PsiElement(LEFT_PAREN)('(')
              MiniTTApplicationImpl(APPLICATION)
                MiniTTVariableImpl(VARIABLE)
                  PsiElement(IDENTIFIER)('maybe')
                PsiWhiteSpace(' ')
                MiniTTVariableImpl(VARIABLE)
                  PsiElement(IDENTIFIER)('t')
              PsiElement(RIGHT_PAREN)(')')
            PsiWhiteSpace(' ')
            PsiElement(ARROW)('->')
            PsiWhiteSpace(' ')
            MiniTTUniverseImpl(UNIVERSE)
              PsiElement(TYPE_UNIVERSE)('Type')
          PsiWhiteSpace(' ')
          PsiElement(EQ)('=')
          PsiWhiteSpace(' ')
          MiniTTSplitImpl(SPLIT)
            PsiElement(SPLIT_KEYWORD)('split')
            PsiWhiteSpace('\n  ')
            MiniTTChoicesImpl(CHOICES)
              PsiElement(LEFT_BRACE)('{')
              PsiWhiteSpace(' ')
              MiniTTPatternMatchImpl(PATTERN_MATCH)
                PsiElement(CONSTRUCTOR_NAME)('Just')
                PsiWhiteSpace(' ')
                MiniTTAtomPatternImpl(ATOM_PATTERN)
                  PsiElement(META_VAR)('_')
                PsiWhiteSpace(' ')
                PsiElement(DOUBLE_ARROW)('=>')
                PsiWhiteSpace(' ')
                MiniTTVariableImpl(VARIABLE)
                  PsiElement(IDENTIFIER)('t')
              PsiWhiteSpace('\n  ')
              PsiElement(SEP)('|')
              PsiWhiteSpace(' ')
              MiniTTPatternMatchImpl(PATTERN_MATCH)
                PsiElement(CONSTRUCTOR_NAME)('Nothing')
                PsiWhiteSpace(' ')
                PsiElement(DOUBLE_ARROW)('=>')
                PsiWhiteSpace(' ')
                MiniTTOneImpl(ONE)
                  PsiElement(ONE_KEYWORD)('1')
              PsiWhiteSpace('\n  ')
              PsiElement(RIGHT_BRACE)('}')
          PsiElement(SEMICOLON)(';')
        PsiWhiteSpace('\n\n')
        PsiComment(line comment)('-- let unwrap_bad: \Pi t: Type. \Pi mt: maybe t. (unwrap_type t) mt = \lambda t.')
        PsiWhiteSpace('\n')
        PsiComment(line comment)('--   the (\Pi mt: maybe t. (unwrap_type t) mt) split')
        PsiWhiteSpace('\n')
        PsiComment(line comment)('--     { Just a => a')
        PsiWhiteSpace('\n')
        PsiComment(line comment)('--     | Nothing => 0')
        PsiWhiteSpace('\n')
        PsiComment(line comment)('--     };')
        PsiWhiteSpace('\n\n')
        PsiComment(line comment)('-- The above definition won't work, because Mini-TT model is so stupid:')
        PsiWhiteSpace('\n')
        PsiComment(line comment)('-- when it type-checks a declaration, it checks several hard-coded patterns of')
        PsiWhiteSpace('\n')
        PsiComment(line comment)('-- well-typed expressions. When non of the rules matches, it tries to infer the')
        PsiWhiteSpace('\n')
        PsiComment(line comment)('-- expression's type and compare with the signature.')
        PsiWhiteSpace('\n\n')
        PsiComment(line comment)('-- And, as you can imagine, it cannot infer `split`'s type signature obviously.')
        PsiWhiteSpace('\n')
        PsiComment(line comment)('-- Look at this cubicaltt-like replacement:')
        PsiWhiteSpace('\n\n')
        MiniTTDeclarationExpressionImpl(DECLARATION_EXPRESSION)
          MiniTTDeclarationImpl(DECLARATION)
            PsiElement(LET_KEYWORD)('let')
            PsiWhiteSpace(' ')
            MiniTTAtomPatternImpl(ATOM_PATTERN)
              PsiElement(IDENTIFIER)('unwrap')
            PsiWhiteSpace(' ')
            MiniTTPrefixParameterImpl(PREFIX_PARAMETER)
              PsiElement(LEFT_PAREN)('(')
              MiniTTTypedPatternImpl(TYPED_PATTERN)
                MiniTTAtomPatternImpl(ATOM_PATTERN)
                  PsiElement(IDENTIFIER)('t')
                PsiWhiteSpace(' ')
                PsiElement(COLON)(':')
                PsiWhiteSpace(' ')
                MiniTTUniverseImpl(UNIVERSE)
                  PsiElement(TYPE_UNIVERSE)('Type')
              PsiElement(RIGHT_PAREN)(')')
            PsiElement(COLON)(':')
            PsiWhiteSpace(' ')
            MiniTTPiTypeImpl(PI_TYPE)
              PsiElement(PI)('\Pi')
              PsiWhiteSpace(' ')
              MiniTTTypedAbstractionImpl(TYPED_ABSTRACTION)
                MiniTTTypedPatternImpl(TYPED_PATTERN)
                  MiniTTAtomPatternImpl(ATOM_PATTERN)
                    PsiElement(IDENTIFIER)('mt')
                  PsiElement(COLON)(':')
                  PsiWhiteSpace(' ')
                  MiniTTApplicationImpl(APPLICATION)
                    MiniTTVariableImpl(VARIABLE)
                      PsiElement(IDENTIFIER)('maybe')
                    PsiWhiteSpace(' ')
                    MiniTTVariableImpl(VARIABLE)
                      PsiElement(IDENTIFIER)('t')
                PsiElement(DOT)('.')
                PsiWhiteSpace(' ')
                MiniTTApplicationImpl(APPLICATION)
                  MiniTTAtomImpl(ATOM)
                    PsiElement(LEFT_PAREN)('(')
                    MiniTTApplicationImpl(APPLICATION)
                      MiniTTVariableImpl(VARIABLE)
                        PsiElement(IDENTIFIER)('unwrap_type')
                      PsiWhiteSpace(' ')
                      MiniTTVariableImpl(VARIABLE)
                        PsiElement(IDENTIFIER)('t')
                    PsiElement(RIGHT_PAREN)(')')
                  PsiWhiteSpace(' ')
                  MiniTTVariableImpl(VARIABLE)
                    PsiElement(IDENTIFIER)('mt')
            PsiWhiteSpace(' ')
            PsiElement(EQ)('=')
            PsiWhiteSpace(' ')
            MiniTTSplitImpl(SPLIT)
              PsiElement(SPLIT_KEYWORD)('split')
              PsiWhiteSpace('\n  ')
              PsiComment(line comment)('-- I'm so sorry for the dumb parser, function application is accidentally')
              PsiWhiteSpace('\n  ')
              PsiComment(line comment)('-- right-associative.')
              PsiWhiteSpace('\n  ')
              MiniTTChoicesImpl(CHOICES)
                PsiElement(LEFT_BRACE)('{')
                PsiWhiteSpace(' ')
                MiniTTPatternMatchImpl(PATTERN_MATCH)
                  PsiElement(CONSTRUCTOR_NAME)('Just')
                  PsiWhiteSpace(' ')
                  MiniTTAtomPatternImpl(ATOM_PATTERN)
                    PsiElement(IDENTIFIER)('a')
                  PsiWhiteSpace(' ')
                  PsiElement(DOUBLE_ARROW)('=>')
                  PsiWhiteSpace(' ')
                  MiniTTVariableImpl(VARIABLE)
                    PsiElement(IDENTIFIER)('a')
                PsiWhiteSpace('\n  ')
                PsiElement(SEP)('|')
                PsiWhiteSpace(' ')
                MiniTTPatternMatchImpl(PATTERN_MATCH)
                  PsiElement(CONSTRUCTOR_NAME)('Nothing')
                  PsiWhiteSpace(' ')
                  PsiElement(DOUBLE_ARROW)('=>')
                  PsiWhiteSpace(' ')
                  MiniTTUnitImpl(UNIT)
                    PsiElement(UNIT_KEYWORD)('0')
                PsiWhiteSpace('\n  ')
                PsiElement(RIGHT_BRACE)('}')
            PsiElement(SEMICOLON)(';')