FILE
  PsiComment(block comment)('/**\n\n"─"\n  - used alone as introduces names as in argument list\n  - used after as pattern, means introduce without name\n"┬" empty pattern\n"⊏" single pattern\n"┌", "└", "├" is patterns with 2+ cases\n\n"│" is just whitespace\n**/')
  PsiWhiteSpace('\n\n\n\n')
  MlangDeclarationImpl(DECLARATION)
    MlangDefineImpl(DEFINE)
      PsiElement(KW_DEFINE)('define')
      PsiWhiteSpace(' ')
      MlangIdentImpl(IDENT)
        PsiElement(IDENTIFIER)('fin3_copy')
      PsiWhiteSpace(' ')
      PsiElement(EQ)('=')
      PsiWhiteSpace(' ')
      MlangSumExprImpl(SUM_EXPR)
        PsiElement(KW_SUM)('sum')
        PsiWhiteSpace(' ')
        PsiElement(LBRACE)('{')
        PsiWhiteSpace('\n  ')
        MlangCaseImpl(CASE)
          PsiElement(KW_CASE)('case')
          PsiWhiteSpace(' ')
          MlangParamIdentImpl(PARAM_IDENT)
            PsiElement(IDENTIFIER)('one')
          PsiWhiteSpace(' ')
          MlangParamIdentImpl(PARAM_IDENT)
            PsiElement(IDENTIFIER)('two')
          PsiWhiteSpace(' ')
          MlangParamIdentImpl(PARAM_IDENT)
            PsiElement(IDENTIFIER)('three')
        PsiWhiteSpace('\n')
        PsiElement(RBRACE)('}')
  PsiWhiteSpace('\n\n')
  MlangDeclarationImpl(DECLARATION)
    MlangDefineImpl(DEFINE)
      PsiElement(KW_DEFINE)('define')
      PsiWhiteSpace(' ')
      MlangIdentImpl(IDENT)
        PsiElement(IDENTIFIER)('ig')
      PsiWhiteSpace(' ')
      PsiElement(EQ)('=')
      PsiWhiteSpace(' ')
      MlangLetExprImpl(LET_EXPR)
        PsiElement(KW_RUN)('run')
        PsiWhiteSpace(' ')
        PsiElement(LBRACE)('{')
        PsiWhiteSpace(' ')
        PsiComment(line comment)('// "{" starts a let expression')
        PsiWhiteSpace('\n\n  ')
        MlangDeclarationImpl(DECLARATION)
          MlangDefineImpl(DEFINE)
            PsiElement(KW_DEFINE)('define')
            PsiWhiteSpace(' ')
            MlangIdentImpl(IDENT)
              PsiElement(IDENTIFIER)('fin3')
            PsiWhiteSpace(' ')
            PsiElement(EQ)('=')
            PsiWhiteSpace(' ')
            MlangSumExprImpl(SUM_EXPR)
              PsiElement(KW_SUM)('sum')
              PsiWhiteSpace(' ')
              PsiElement(LBRACE)('{')
              PsiWhiteSpace('\n    ')
              MlangCaseImpl(CASE)
                PsiElement(KW_CASE)('case')
                PsiWhiteSpace(' ')
                MlangParamIdentImpl(PARAM_IDENT)
                  PsiElement(IDENTIFIER)('one')
                PsiWhiteSpace(' ')
                MlangParamIdentImpl(PARAM_IDENT)
                  PsiElement(IDENTIFIER)('two')
                PsiWhiteSpace(' ')
                MlangParamIdentImpl(PARAM_IDENT)
                  PsiElement(IDENTIFIER)('three')
              PsiWhiteSpace('\n  ')
              PsiElement(RBRACE)('}')
        PsiWhiteSpace('\n\n  ')
        PsiComment(block comment)('/* don't work because inductive definitions must be at top level\n  define inductively fin3 = sum {\n    case one two three\n  }\n  */')
        PsiWhiteSpace('\n\n  ')
        MlangDeclarationImpl(DECLARATION)
          MlangDefineImpl(DEFINE)
            PsiElement(KW_DEFINE)('define')
            PsiWhiteSpace(' ')
            MlangIdentImpl(IDENT)
              PsiElement(IDENTIFIER)('fin3_pair')
            PsiWhiteSpace(' ')
            PsiElement(EQ)('=')
            PsiWhiteSpace(' ')
            MlangRecordExprImpl(RECORD_EXPR)
              PsiElement(KW_RECORD)('record')
              PsiWhiteSpace(' ')
              PsiElement(LBRACE)('{')
              PsiWhiteSpace('\n    ')
              MlangFieldImpl(FIELD)
                PsiElement(KW_FIELD)('field')
                PsiWhiteSpace(' ')
                MlangParamImpl(PARAM)
                  MlangParamIdentImpl(PARAM_IDENT)
                    PsiElement(IDENTIFIER)('a')
                  PsiWhiteSpace(' ')
                  MlangParamIdentImpl(PARAM_IDENT)
                    PsiElement(IDENTIFIER)('b')
                  PsiElement(COLON)(':')
                  PsiWhiteSpace(' ')
                  MlangRefExprImpl(REF_EXPR)
                    PsiElement(IDENTIFIER)('fin3')
              PsiWhiteSpace('\n  ')
              PsiElement(RBRACE)('}')
        PsiWhiteSpace('\n\n\n  ')
        MlangDeclarationImpl(DECLARATION)
          MlangDefineImpl(DEFINE)
            PsiElement(KW_DEFINE)('define')
            PsiWhiteSpace(' ')
            MlangIdentImpl(IDENT)
              PsiElement(IDENTIFIER)('inverse')
            PsiElement(COLON)(':')
            PsiWhiteSpace('\n    ')
            MlangPiSimpleExprImpl(PI_SIMPLE_EXPR)
              MlangRefExprImpl(REF_EXPR)
                PsiElement(IDENTIFIER)('fin3')
              PsiWhiteSpace('  ')
              PsiElement(DARROW)('⇒')
              PsiWhiteSpace(' ')
              MlangRefExprImpl(REF_EXPR)
                PsiElement(IDENTIFIER)('fin3')
            PsiWhiteSpace(' ')
            PsiElement(EQ)('=')
            PsiWhiteSpace('\n  ')
            MlangPatternExprImpl(PATTERN_EXPR)
              MlangPatternMultipleImpl(PATTERN_MULTIPLE)
                MlangPatternMultipleStartImpl(PATTERN_MULTIPLE_START)
                  PsiElement(MATRIX_START)('┌')
                  PsiWhiteSpace(' ')
                  MlangParamIdentImpl(PARAM_IDENT)
                    PsiElement(IDENTIFIER)('one')
                  PsiWhiteSpace('   ')
                  MlangPatternContinueImpl(PATTERN_CONTINUE)
                    PsiElement(ARROW)('→')
                    PsiWhiteSpace(' ')
                    MlangProjectionExprImpl(PROJECTION_EXPR)
                      MlangRefExprImpl(REF_EXPR)
                        PsiElement(IDENTIFIER)('fin3')
                      PsiElement(DOT)('.')
                      PsiElement(IDENTIFIER)('three')
                PsiWhiteSpace('\n  ')
                MlangPatternMultipleContImpl(PATTERN_MULTIPLE_CONT)
                  PsiElement(MATRIX_CONT)('├')
                  PsiWhiteSpace(' ')
                  MlangParamIdentImpl(PARAM_IDENT)
                    PsiElement(IDENTIFIER)('two')
                  PsiWhiteSpace('   ')
                  MlangPatternContinueImpl(PATTERN_CONTINUE)
                    PsiElement(ARROW)('→')
                    PsiWhiteSpace(' ')
                    MlangProjectionExprImpl(PROJECTION_EXPR)
                      MlangRefExprImpl(REF_EXPR)
                        PsiElement(IDENTIFIER)('fin3')
                      PsiElement(DOT)('.')
                      PsiElement(IDENTIFIER)('two')
                PsiWhiteSpace('\n  ')
                MlangPatternMultipleEndImpl(PATTERN_MULTIPLE_END)
                  PsiElement(MATRIX_END)('└')
                  PsiWhiteSpace(' ')
                  MlangParamIdentImpl(PARAM_IDENT)
                    PsiElement(IDENTIFIER)('three')
                  PsiWhiteSpace(' ')
                  MlangPatternContinueImpl(PATTERN_CONTINUE)
                    PsiElement(ARROW)('→')
                    PsiWhiteSpace(' ')
                    MlangProjectionExprImpl(PROJECTION_EXPR)
                      MlangRefExprImpl(REF_EXPR)
                        PsiElement(IDENTIFIER)('fin3')
                      PsiElement(DOT)('.')
                      PsiElement(IDENTIFIER)('one')
        PsiWhiteSpace('\n\n  ')
        MlangDeclarationImpl(DECLARATION)
          MlangDefineImpl(DEFINE)
            PsiElement(KW_DEFINE)('define')
            PsiWhiteSpace(' ')
            MlangIdentImpl(IDENT)
              PsiElement(IDENTIFIER)('test')
            PsiElement(COLON)(':')
            PsiWhiteSpace('\n   ')
            MlangPiExprImpl(PI_EXPR)
              MlangTeleImpl(TELE)
                PsiElement(LPAREN)('(')
                MlangParamImpl(PARAM)
                  MlangParamIdentImpl(PARAM_IDENT)
                    PsiElement(IDENTIFIER)('intros')
                  PsiWhiteSpace(' ')
                  MlangParamIdentImpl(PARAM_IDENT)
                    PsiElement(IDENTIFIER)('a')
                  PsiWhiteSpace('       ')
                  MlangParamIdentImpl(PARAM_IDENT)
                    PsiElement(IDENTIFIER)('b')
                  PsiElement(COLON)(':')
                  PsiWhiteSpace(' ')
                  MlangRefExprImpl(REF_EXPR)
                    PsiElement(IDENTIFIER)('fin3')
                PsiElement(RPAREN)(')')
              PsiWhiteSpace(' ')
              PsiElement(DARROW)('⇒')
              PsiWhiteSpace(' ')
              MlangRefExprImpl(REF_EXPR)
                PsiElement(IDENTIFIER)('fin3')
            PsiWhiteSpace(' ')
            PsiElement(EQ)('=')
            PsiWhiteSpace('\n    ')
            MlangPatternExprImpl(PATTERN_EXPR)
              PsiElement(IGNORED)('─')
              PsiWhiteSpace('    ')
              MlangPatternContinueImpl(PATTERN_CONTINUE)
                MlangPatternExprImpl(PATTERN_EXPR)
                  MlangPatternMultipleImpl(PATTERN_MULTIPLE)
                    MlangPatternMultipleStartImpl(PATTERN_MULTIPLE_START)
                      PsiElement(MATRIX_START)('┌')
                      PsiWhiteSpace(' ')
                      MlangParamIdentImpl(PARAM_IDENT)
                        PsiElement(IDENTIFIER)('one')
                      PsiWhiteSpace('   ')
                      MlangPatternContinueImpl(PATTERN_CONTINUE)
                        MlangPatternExprImpl(PATTERN_EXPR)
                          MlangPatternMultipleImpl(PATTERN_MULTIPLE)
                            MlangPatternMultipleStartImpl(PATTERN_MULTIPLE_START)
                              PsiElement(MATRIX_START)('┌')
                              PsiWhiteSpace(' ')
                              MlangParamIdentImpl(PARAM_IDENT)
                                PsiElement(IDENTIFIER)('one')
                              PsiWhiteSpace('      ')
                              MlangPatternContinueImpl(PATTERN_CONTINUE)
                                PsiElement(ARROW)('→')
                                PsiWhiteSpace(' ')
                                MlangProjectionExprImpl(PROJECTION_EXPR)
                                  MlangRefExprImpl(REF_EXPR)
                                    PsiElement(IDENTIFIER)('fin3')
                                  PsiElement(DOT)('.')
                                  PsiElement(IDENTIFIER)('three')
                            PsiWhiteSpace('\n         │       ')
                            MlangPatternMultipleContImpl(PATTERN_MULTIPLE_CONT)
                              PsiElement(MATRIX_CONT)('├')
                              PsiWhiteSpace(' ')
                              MlangParamIdentImpl(PARAM_IDENT)
                                PsiElement(IDENTIFIER)('two')
                              PsiWhiteSpace('      ')
                              MlangPatternContinueImpl(PATTERN_CONTINUE)
                                PsiElement(ARROW)('→')
                                PsiWhiteSpace(' ')
                                MlangProjectionExprImpl(PROJECTION_EXPR)
                                  MlangRefExprImpl(REF_EXPR)
                                    PsiElement(IDENTIFIER)('fin3')
                                  PsiElement(DOT)('.')
                                  PsiElement(IDENTIFIER)('two')
                            PsiWhiteSpace('\n         │       ')
                            MlangPatternMultipleEndImpl(PATTERN_MULTIPLE_END)
                              PsiElement(MATRIX_END)('└')
                              PsiWhiteSpace(' ')
                              MlangParamIdentImpl(PARAM_IDENT)
                                PsiElement(IDENTIFIER)('three')
                              PsiWhiteSpace('    ')
                              MlangPatternContinueImpl(PATTERN_CONTINUE)
                                PsiElement(ARROW)('→')
                                PsiWhiteSpace(' ')
                                MlangAppExprImpl(APP_EXPR)
                                  MlangRefExprImpl(REF_EXPR)
                                    PsiElement(IDENTIFIER)('test')
                                  PsiElement(LPAREN)('(')
                                  MlangProjectionExprImpl(PROJECTION_EXPR)
                                    MlangRefExprImpl(REF_EXPR)
                                      PsiElement(IDENTIFIER)('fin3')
                                    PsiElement(DOT)('.')
                                    PsiElement(IDENTIFIER)('one')
                                  PsiElement(COMMA)(',')
                                  PsiWhiteSpace(' ')
                                  MlangProjectionExprImpl(PROJECTION_EXPR)
                                    MlangRefExprImpl(REF_EXPR)
                                      PsiElement(IDENTIFIER)('fin3')
                                    PsiElement(DOT)('.')
                                    PsiElement(IDENTIFIER)('one')
                                  PsiElement(COMMA)(',')
                                  PsiWhiteSpace(' ')
                                  MlangProjectionExprImpl(PROJECTION_EXPR)
                                    MlangRefExprImpl(REF_EXPR)
                                      PsiElement(IDENTIFIER)('fin3')
                                    PsiElement(DOT)('.')
                                    PsiElement(IDENTIFIER)('one')
                                  PsiElement(RPAREN)(')')
                    PsiWhiteSpace(' ')
                    PsiComment(line comment)('// recursive definitions')
                    PsiWhiteSpace('\n         ')
                    MlangPatternMultipleContImpl(PATTERN_MULTIPLE_CONT)
                      PsiElement(MATRIX_CONT)('├')
                      PsiWhiteSpace(' ')
                      MlangParamIdentImpl(PARAM_IDENT)
                        PsiElement(IDENTIFIER)('three')
                      PsiWhiteSpace('   ')
                      MlangPatternContinueImpl(PATTERN_CONTINUE)
                        MlangPatternExprImpl(PATTERN_EXPR)
                          PsiElement(IGNORED)('─')
                          PsiWhiteSpace('        ')
                          MlangPatternContinueImpl(PATTERN_CONTINUE)
                            PsiElement(ARROW)('→')
                            PsiWhiteSpace(' ')
                            MlangRefExprImpl(REF_EXPR)
                              PsiElement(IDENTIFIER)('b')
                    PsiWhiteSpace('\n         ')
                    MlangPatternMultipleEndImpl(PATTERN_MULTIPLE_END)
                      PsiElement(MATRIX_END)('└')
                      PsiWhiteSpace(' ')
                      MlangParamIdentImpl(PARAM_IDENT)
                        PsiElement(IGNORED)('─')
                      PsiWhiteSpace('       ')
                      MlangPatternContinueImpl(PATTERN_CONTINUE)
                        MlangPatternExprImpl(PATTERN_EXPR)
                          PsiElement(IGNORED)('─')
                          PsiWhiteSpace('        ')
                          MlangPatternContinueImpl(PATTERN_CONTINUE)
                            PsiElement(ARROW)('→')
                            PsiWhiteSpace(' ')
                            MlangRefExprImpl(REF_EXPR)
                              PsiElement(IDENTIFIER)('b')
        PsiWhiteSpace(' ')
        PsiComment(line comment)('// although first is a dash pattern, it doesn't introduce the name (yet)')
        PsiWhiteSpace('\n\n  ')
        MlangRefExprImpl(REF_EXPR)
          PsiElement(IDENTIFIER)('test')
        PsiWhiteSpace('\n')
        PsiElement(RBRACE)('}')
  PsiWhiteSpace('\n\n')
  MlangDeclarationImpl(DECLARATION)
    MlangDefineImpl(DEFINE)
      PsiElement(KW_DEFINE)('define')
      PsiWhiteSpace(' ')
      MlangIdentImpl(IDENT)
        PsiElement(IDENTIFIER)('ignored_again')
      PsiWhiteSpace(' ')
      PsiElement(EQ)('=')
      PsiWhiteSpace(' ')
      MlangAppExprImpl(APP_EXPR)
        MlangRefExprImpl(REF_EXPR)
          PsiElement(IDENTIFIER)('ig')
        PsiElement(LPAREN)('(')
        MlangProjectionExprImpl(PROJECTION_EXPR)
          MlangRefExprImpl(REF_EXPR)
            PsiElement(IDENTIFIER)('fin3_copy')
          PsiElement(DOT)('.')
          PsiElement(IDENTIFIER)('one')
        PsiElement(COMMA)(',')
        PsiWhiteSpace(' ')
        MlangProjectionExprImpl(PROJECTION_EXPR)
          MlangRefExprImpl(REF_EXPR)
            PsiElement(IDENTIFIER)('fin3_copy')
          PsiElement(DOT)('.')
          PsiElement(IDENTIFIER)('one')
        PsiElement(COMMA)(',')
        PsiWhiteSpace(' ')
        MlangProjectionExprImpl(PROJECTION_EXPR)
          MlangRefExprImpl(REF_EXPR)
            PsiElement(IDENTIFIER)('fin3_copy')
          PsiElement(DOT)('.')
          PsiElement(IDENTIFIER)('three')
        PsiElement(RPAREN)(')')