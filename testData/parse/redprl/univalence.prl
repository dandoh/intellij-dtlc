define IsContr (#C) = (* [c : #C] (-> [c' : #C] (path [_] #C c' c))).

define Fiber (#A,#B,#f,#b) = (* [a : #A] (path [_] #B ($ #f a) #b)).

define IsEquiv (#A,#B,#f) = (-> [b : #B] (IsContr (Fiber #A #B #f b))).

define Equiv (#A,#B) = (* [f : (-> #A #B)] (IsEquiv #A #B f)).

define IsProp (#C) = (-> [c c' : #C] (path [_] #C c c')).

define IsSet (#C) = (-> [c c' : #C] (IsProp (path [_] #C c c'))).

define Retract (#A,#f,#g) = (-> [a : #A] (path [_] #A ($ #g ($ #f a)) a)).

theorem IdEquiv(#l:lvl) :
  (-> [ty : (U #l hcom)] (Equiv ty ty))
by {
  lam ty =>
  { lam a => use a
  , lam a =>
     { {use a, abs _ => use a}
     , lam {_,c'} => abs i =>
        {`(hcom 1~>0 ty a [i=0 [j] (@ c' j)] [i=1 [j] a]),
         abs j => `(hcom 1~>j ty a [i=0 [j] (@ c' j)] [i=1 [j] a])}
     }
  }
}.

// per Dan Licata, UA and UABeta suffice for full univalence:
// https://groups.google.com/forum/#!topic/homotopytypetheory/j2KBIvDw53s

theorem UA(#l:lvl) :
  (-> [ty/a ty/b : (U #l kan)]
      [e : (Equiv ty/a ty/b)]
      (path [_] (U #l kan) ty/a ty/b))
by {
  lam ty/a ty/b e =>
    abs x => `(V x ty/a ty/b e)
}.

theorem UABeta(#l:lvl) :
  (->
   [ty/a ty/b : (U #l kan)]
   [e : (Equiv ty/a ty/b)]
   [a : ty/a]
   (path [_] ty/b
    (coe 0~>1 [x] (@ ($ (UA #l) ty/a ty/b e) x) a)
    ($ (!proj1 e) a)))
by {
  unfold UA;
  lam ty/a ty/b {f,_} a =>
    abs x => `(coe x~>1 [_] ty/b ($ f a))
}.

// To prove univalence from UA and UABeta, we need some basic results.
// (What follows is adapted from the cubicaltt prelude.)

theorem PathToEquiv(#l:lvl) :
  (->
   [ty/a ty/b : (U #l kan)]
   [p : (path [_] (U #l kan) ty/a ty/b)]
   (Equiv ty/a ty/b))
by {
  lam ty/a ty/b p =>
  `(coe 0~>1 [x] (Equiv ty/a (@ p x)) ($ (IdEquiv #l) ty/a))
}.

theorem LemPropF(#l:lvl) :
  (->
   [ty/a : (U #l kan)]
   [ty/b : (-> ty/a (U #l kan))]
   [prop/b : (-> [a : ty/a] (IsProp ($ ty/b a)))]
   [p : (-> dim ty/a)]
   [b0 : ($ ty/b (@ p 0))]
   [b1 : ($ ty/b (@ p 1))]
   (path [x] ($ ty/b (@ p x)) b0 b1))
by {
  lam ty/a ty/b prop/b p b0 b1 => abs x =>
    use prop/b
      [ use p [`x]
      , `(coe 0~>x [i] ($ ty/b (@ p i)) b0)
      , `(coe 1~>x [i] ($ ty/b (@ p i)) b1)
      , `x
      ]
}.

theorem LemSig(#l:lvl) :
  (->
   [ty/a : (U #l kan)]
   [ty/b : (-> ty/a (U #l kan))]
   [prop/b : (-> [a : ty/a] (IsProp ($ ty/b a)))]
   [u v : (* [a : ty/a] ($ ty/b a))]
   [p : (path [_] ty/a (!proj1 u) (!proj1 v))]
   (path [_] (* [a : ty/a] ($ ty/b a)) u v))
by {
  lam ty/a ty/b prop/b {u1, u2} {v1, v2} p => abs x =>
    { use p [`x]
    , use (LemPropF #l) [`ty/a, `ty/b, `prop/b, abs i => use p [`i], `u2, `v2, `x]
    }
}.

theorem PropSig(#l:lvl) :
  (->
   [ty/a : (U #l kan)]
   [ty/b : (-> ty/a (U #l kan))]
   [prop/a : (IsProp ty/a)]
   [prop/b : (-> [a : ty/a] (IsProp ($ ty/b a)))]
   [u v : (* [a : ty/a] ($ ty/b a))]
   (path [_] (* [a : ty/a] ($ ty/b a)) u v))
by {
  lam ty/a ty/b prop/a prop/b u v =>
    use (LemSig #l)
      [ `ty/a
      , `ty/b
      , `prop/b
      , `u
      , `v
      , use prop/a [let {u1, _} = u; `u1, let {v1, _} = v; `v1]
      ]
}.

theorem PropPi(#l:lvl) :
  (->
   [ty/a : (U #l kan)]
   [ty/b : (-> ty/a (U #l kan))]
   [prop/b : (-> [a : ty/a] (IsProp ($ ty/b a)))]
   [f g : (-> [a : ty/a] ($ ty/b a))]
   (path [_] (-> [a : ty/a] ($ ty/b a)) f g))
by {
  lam ty/a ty/b prop/b f g =>
  abs x => lam a =>
    use prop/b [`a, use f [`a], use g [`a], `x];
}.


theorem LemProp(#l:lvl) :
 (->
  [ty/a : (U #l kan)]
  [prop/a : (IsProp ty/a)]
  [a : ty/a]
  (IsContr ty/a))
by {
  lam ty/a prop/a a =>
  {`a , lam a' => use prop/a [`a', `a]}
}.

theorem PropSet(#l:lvl) :
  (->
   [ty : (U #l kan)]
   [prop : (IsProp ty)]
   (IsSet ty))
by {
  unfold IsProp IsSet;
  lam ty prop a b p q => abs x y =>
    `(hcom 0~>1 ty a
      [y=0 [z] (@ ($ prop a a) z)]
      [y=1 [z] (@ ($ prop a b) z)]
      [x=0 [z] (@ ($ prop a (@ p y)) z)]
      [x=1 [z] (@ ($ prop a (@ q y)) z)])
}.

theorem PropIsContr(#l:lvl) :
  (->
   [ty/a : (U #l kan)]
   (IsProp (IsContr ty/a)))
by {
  lam ty/a isContr =>
    claim contr/a/prop : (IsProp (IsContr ty/a)) by {
      let {_,contr} = isContr;
      claim prop/a : (IsProp ty/a) by {
        lam a a' => abs x =>
          `(hcom 1~>0 ty/a (@ ($ contr a) x)
            [x=0 [_] a]
            [x=1 [y] (@ ($ contr a') y)])
      };

      use (PropSig #l)
        [ `ty/a
        , lam a => `(-> [a' : ty/a] (path [_] ty/a a' a))
        , `prop/a
        , lam a =>
            use (PropPi #l)
              [ `ty/a
              , lam a' => `(path [_] ty/a a' a)
              , lam a' => use (PropSet #l) [`ty/a, `prop/a, `a', `a]
              ]
        ]
    };

    use contr/a/prop [`isContr]
}.

theorem PropIsEquiv(#l:lvl) :
  (->
   [ty/a ty/b : (U #l kan)]
   [f : (-> ty/a ty/b)]
   (IsProp (IsEquiv ty/a ty/b f)))
by {
  lam ty/a ty/b f e0 e1 =>
  abs x => lam b =>
    use (PropIsContr #l)
      [ `(Fiber ty/a ty/b f b)
      , use e0 [`b]
      , use e1 [`b]
      , `x
      ]
}.

theorem EquivLemma(#l:lvl) :
  (->
   [ty/a ty/b : (U #l kan)]
   [e1 e2 : (Equiv ty/a ty/b)]
   (path [_] (-> ty/a ty/b) (!proj1 e1) (!proj1 e2))
   (path [_] (Equiv ty/a ty/b) e1 e2))
by {
  lam ty/a ty/b =>
    use (LemSig #l)
      [ `(-> ty/a ty/b)
      , lam f => `(IsEquiv ty/a ty/b f)
      , use (PropIsEquiv #l) [`ty/a, `ty/b]
      ]
}.

theorem UARet(#l:lvl) :
  (->
   [ty/a ty/b : (U #l kan)]
   (Retract
    (Equiv ty/a ty/b)
    ($ (UA #l) ty/a ty/b)
    ($ (PathToEquiv #l) ty/a ty/b)))
by {
  lam ty/a ty/b e =>
    use (EquivLemma #l)
      [ `ty/a
      , `ty/b
      , use (PathToEquiv #l) [`ty/a, `ty/b, use (UA #l) [`ty/a, `ty/b, `e]]
      , `e
      , abs x => lam a =>
          use (UABeta #l) [`ty/a, `ty/b, `e, `(coe 1~>x [_] ty/a a), `x]
      ];

      unfold PathToEquiv at right in concl; auto
}.

theorem IsContrPath(#l:lvl) :
  (->
   [ty/a : (U #l kan)]
   (IsContr (* [ty/b : (U #l kan)] (path [_] (U #l kan) ty/a ty/b))))
by {
  lam ty/a =>
  { {use ty/a, abs _ => use ty/a},

    lam {ty/b,p} => abs x =>
      { `(hcom 0~>1 (U #l kan) ty/a [x=0 [y] (@ p y)] [x=1 [_] ty/a])
      , abs y => `(hcom 0~>y (U #l kan) ty/a [x=0 [y] (@ p y)] [x=1 [_] ty/a])
      }
  }
}.

theorem RetIsContr(#l:lvl) :
  (->
   [ty/a ty/b : (U #l kan)]
   [f : (-> ty/a ty/b)]
   [g : (-> ty/b ty/a)]
   [h : (-> [a : ty/a] (path [_] ty/a ($ g ($ f a)) a))]
   [contr/b : (IsContr ty/b)]
   (IsContr ty/a))
by {
  lam ty/a ty/b f g h {b,p} =>
  {`($ g b),
   lam a => abs x =>
     `(hcom 0~>1 ty/a ($ g (@ ($ p ($ f a)) x))
        [x=0 [y] (@ ($ h a) y)]
        [x=1 [_] ($ g b)])}
}.

theorem SigEquivToPath(#l:lvl) :
  (->
   [ty/a : (U #l kan)]
   (* [ty/b : (U #l kan)] (Equiv ty/a ty/b))
   (* [ty/b : (U #l kan)] (path [_] (U #l kan) ty/a ty/b)))
by {
  lam ty/a {ty/b,equiv} =>
  { use ty/b
  , abs x => `(V x ty/a ty/b equiv)
  }
}.

theorem SigPathToEquiv(#l:lvl) :
  (->
   [ty/a : (U #l kan)]
   (* [ty/b : (U #l kan)] (path [_] (U #l kan) ty/a ty/b))
   (* [ty/b : (U #l kan)] (Equiv ty/a ty/b)))
by {
  lam ty/a {ty/b,p} =>
  { use ty/b
  , use (PathToEquiv #l) [`ty/a, `ty/b, `p]
  }
}.

theorem UARetSig(#l:lvl) :
  (->
   [ty/a : (U #l kan)]
   (Retract
    (* [ty/b : (U #l kan)] (Equiv ty/a ty/b))
    ($ (SigEquivToPath #l) ty/a)
    ($ (SigPathToEquiv #l) ty/a)))
by {
  lam ty/a {ty/b,equiv} =>
  unfold SigPathToEquiv SigEquivToPath;
  abs x =>
    { use ty/b
    , use (UARet #l) [`ty/a, `ty/b, `equiv, `x]
    }
}.



// The following is a formulation of univalence proposed by Martin Escardo:
// https://groups.google.com/forum/#!msg/homotopytypetheory/HfCB_b-PNEU/Ibb48LvUMeUJ
// See also Theorem 5.8.4 of the HoTT Book.

theorem Univalence(#l:lvl) :
  (->
   [ty/a : (U #l kan)]
   (IsContr (* [ty/b : (U #l kan)] (Equiv ty/a ty/b))))
by {
  lam ty/a =>
  use (RetIsContr (++ #l))
   [ `(* [ty/b : (U #l kan)] (Equiv ty/a ty/b))
   , `(* [ty/b : (U #l kan)] (path [_] (U #l kan) ty/a ty/b))
   , use (SigEquivToPath #l) [`ty/a]
   , use (SigPathToEquiv #l) [`ty/a]
   , use (UARetSig #l) [`ty/a]
   , use (IsContrPath #l) [`ty/a]
   ]
}.
