theorem BoolTest :
  (-> bool bool)
by {
  // A term/witness can be supplied to the refiner at any point in a tactic script
  // using the quotation operator `.
  lam x => if x then `tt else `ff
}.


theorem PathTest :
  (path [_] S1 base base)
by {
  abs x => `(loop x)
}.

theorem LowLevel :
  (->
    (-> bool bool)
    bool)
by {
  refine fun/intro;
  [ with f =>
    elim f; [`tt, with x/eq x => use x]
  , refine fun/eqtype;
    refine bool/eqtype
  ]
}.

print LowLevel.

theorem LowLevel2 :
  (->
    (-> bool bool)
    bool
    bool)
by {
  repeat {refine fun/intro; [id, auto]};
  with x f =>
    elim f;
    [ use x
    , with y/eq y => use y
    ]
}.


print LowLevel2.

theorem FunElimTest :
  (->
   (-> bool bool)
   bool)
by {
  lam f => use f [`tt]
}.

theorem S1ElimTest :  (-> S1 S1) by {
  lam s =>
    case s of
       base => `base
     | loop x => `(loop x)
}.

tactic Try(#t : tac) = {
  #t || id
}.

// Useful for stepping through a proof RedPRL completes automatically, to see
// what is being done.
tactic TryStep = {
  // We can call our Try tactical. But tactics are parsed with a different grammar than terms,
  // so to avoid ambiguity, when we need to provide a tactic expression as an argument to
  // an operator, we wrap it in (tactic ....).
  (Try #tac{auto-step})
}.

// 'if' is the recursor for booleans.  It takes the motive of induction as an argument
// in order to facilitate type synthesizing.
define BoolEta(#M) =
  (if [a] bool #M tt ff)
.

print BoolEta.

// If we define such a function in the refiner using tactics, we can use the
// built-in 'if x then t1 else t2' tactical, and the extracted witness will be
// an 'if' form with the motive already filled in.
theorem BoolEtaFunction :
  (-> bool bool)
by {
  lam b => if b then `tt else `ff
}.

print BoolEtaFunction.

// Let's prove the existence of a path between the identity function
// on booleans, and the function that takes a boolean to a vacuous if
// statement.
//
// The most fun way to use RedPRL is interactively! We will write our
// proof in the development calculus. The advantage of this style of
// proof is that we can leave holes, and interactively figure out what
// we need to do.
//
theorem PathTest2 :
  (path
    [_] (-> bool bool)
    (lam [b] b)
    (lam [b] (BoolEta b)))
by {
  // abstract a dimension
  abs x =>
    // now, we are constructing a line of functions; so we use a
    // lambda.
    lam b =>
      // for our b:bool, we will construct a path between b and
      // (BoolEta b).
      claim p : (path [_] bool b (BoolEta b)) by {
        if b then abs y => `tt else abs y => `ff
      };

      // Now, we will project the 'x'-side of our path. In the
      // interactive tactic environment, dimension expressions are
      // supplied to the refiner using the '@' "dimension quotation"
      // operator.
      use p [`x]
}.


// It turns out that it is just as good to figure out what the witness
// program for this path is by hand, and then tell RedPRL to try and
// prove that it does in fact witness this path.  This approach is not
// preferred, because it is not interactive: you must know ahead of
// time the entirety of the program, and cannot take advantage of
// types in order to guide its construction, or even synthesize part
// of it.
theorem PathTest3 :
  (path
    [_] (-> bool bool)
    (lam [b] b)
    (lam [b] (BoolEta b)))
by {
  // I'm surprised that RedPRL can typecheck this properly! quite
  // encouraging.
  `(abs [x]
    (lam [b]
     (@ (if [b] (path [_] bool b (BoolEta b)) b (abs [_] tt) (abs [_] ff))
        x)))
}.

print PathTest3.

theorem PairTest :  (* [a : S1] (path [_] S1 a base)) by {
  {`base, abs x => `(loop x)}
}.


define Cmp(#f, #g) =
  (lam [x] ($ #f ($ #g x)))
.


define MyLoop(#x:dim, #m) =
  (tuple [proj1 #m] [proj2 (loop #x)])
.

define Test =
  (MyLoop (dim 0) (loop 1))
.

print Test.

theorem SNot : (-> bool bool) by {
  lam b => if b then `ff else `tt
}.

theorem StrictBoolTest :  SNot = (Cmp SNot (Cmp SNot SNot)) in (-> bool bool) by {
  auto
}.

theorem Not : (-> [_ : bool] bool) by {
  lam x => if x then `ff else `tt
}.

theorem FunExt(#l:lvl) :
  (->
   [a b : (U #l)]
   [f g : (-> a b)]
   [p : (-> [y : a] (path [_] b ($ f y) ($ g y)))]
   (path [_] (-> a b) f g))
by {
  lam a b f g p =>
    abs i => lam x => use p [use x, `i]
}.

print FunExt.

tactic FunExtTac(#l : lvl) = {
  query gl <- concl;
  match gl {
    [a b f g | #jdg{(path [_] (-> %a %b) %f %g) true} =>
      use (FunExt #l) [`%a, `%b, `%f, `%g, id]
    ]
  }
}.

print FunExtTac.

theorem NotNotPath : (path [_] (-> bool bool) (Cmp Not Not) (lam [x] x)) by {
  (FunExtTac #lvl{0});
  lam x => if x then abs _ => `tt else abs _ => `ff
}.

print NotNotPath.
print FunExtTac.
print NotNotPath.

theorem Singleton : (* [x : bool] (path [_] bool x tt)) by {
  {`tt, abs _ => `tt}
}.

theorem PathElimTest : (-> (path [_] bool tt tt) bool) by {
  lam x => use x [`(dim 0)]
}.

theorem PathEta(#l:lvl) :
  (->
   [a : (U #l)]
   [m n : a]
   (path [_] a m n)
   (path [_] a m n))
by {
  lam a m n p => abs j => use p [`j]
}.

print PathEta.

print PathElimTest.
