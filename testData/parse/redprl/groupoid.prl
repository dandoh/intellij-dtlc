// Homogeneous groupoid operations

theorem Refl(#l:lvl) :
  (->
   [ty : (U #l kan)]
   [a : ty]
   (path [_] ty a a))
by {
  lam ty a => abs _ => `a
}.

theorem Symm(#l:lvl) :
  (->
   [ty : (U #l kan)]
   [p : (line [_] ty)]
   (path [_] ty (@ p 1) (@ p 0)))
by {
  lam ty p => abs x =>
  `(hcom 0~>1 ty (@ p 0)
    [x=0 [y] (@ p y)]
    [x=1 [_] (@ p 0)])
}.

theorem Trans(#l:lvl) :
  (->
   [ty : (U #l kan)]
   [p : (line [_] ty)]
   [q : (line [_] ty)]
   [eq : (= ty (@ p 1) (@ q 0))]
   (path [_] ty (@ p 0) (@ q 1)))
by {
  lam ty p q eq => (abs x =>
    `(hcom 0~>1 ty (@ p x)
      [x=0 [_] (@ p 0)]
      [x=1 [z] (@ q z)]));
    auto; assumption
}.

theorem Symm/Unit(#l:lvl) :
  (->
   [ty : (U #l kan)]
   [a : ty]
   (path [_]
     (path [_] ty a a)
     (abs [_] a)
     ($ (Symm #l) ty (abs [_] a))))
by {
  lam ty a =>
  abs y x =>
  `(hcom 0~>y ty a [x=0 [_] a] [x=1 [_] a])
}.

theorem Trans/Unit/R(#l:lvl) :
  (->
   [ty : (U #l kan)]
   [p : (line [_] ty)]
   (path [_]
     (path [_] ty (@ p 0) (@ p 1))
     p
     ($ (Trans #l) ty p (abs [_] (@ p 1)) ax)))
by {
  lam ty p =>
  (abs y x =>
    `(hcom 0~>y ty (@ p x) [x=0 [_] (@ p 0)] [x=1 [_] (@ p 1)]));

  refine path/eq/from-line; auto
}.

// Thanks to Bruno Bentzen for already doing this and drawing a picture! -Carlo
theorem Trans/Sym/R(#l:lvl) :
  (->
   [ty : (U #l kan)]
   [p : (line [_] ty)]
   (path [_]
     (path [_] ty (@ p 0) (@ p 0))
     (abs [_] (@ p 0))
     ($ (Trans #l) ty p ($ (Symm #l) ty p) ax)))
by {
  lam ty p =>
  (abs z x =>
    `(hcom 0~>1 ty (@ p x)
      [x=0 [_] (@ p 0)]
      [x=1 [y] (@ ($ (Symm #l) ty p) y)]
      [z=0 [y] (hcom 0~>x ty (@ p 0) [y=0 [x] (@ p x)] [y=1 [_] (@ p 0)])]
      [z=1 [y]
        (hcom 0~>y ty (@ p x)
          [x=0 [_] (@ p 0)]
          [x=1 [y] (@ ($ (Symm #l) ty p) y)])]));
  unfold Symm; auto
}.

// Heterogeneous groupoid operations

theorem DSymm(#l:lvl) :
  (->
   [ty : (line [_] (U #l kan))]
   [p : (line [x] (@ ty x))]
   (path [x]
     (@ ($ (Symm (++ #l)) (U #l kan) ty) x)
     (@ p 1)
     (@ p 0)))
by {
  lam ty p =>
  (abs x =>
  `(com 0~>1
    [y] (hcom 0~>y (U #l kan) (@ ty 0) [x=0 [y] (@ ty y)] [x=1 [_] (@ ty 0)])
    (@ p 0)
    [x=0 [y] (@ p y)]
    [x=1 [_] (@ p 0)]));
  unfold Symm; auto
}.
